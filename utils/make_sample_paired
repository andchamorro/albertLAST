#!/usr/bin/env python
"""
usage:
    $  ./make_sample PRESENCE_R1.fastq PRESENCE_R2.fastq ABSENCE_R1.fasta ABSENCE_R2.fasta SAMPLE_R1.fastq SAMPLE_R2.fastq
"""
import sys, os, random
from heapq import nlargest
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from sklearn.model_selection import StratifiedKFold
import numpy as np

def sample_from_iterable(iterable, samplesize):
    return (x for _, x in nlargest(samplesize, ((random.random(), x) for x in iterable)))

def iter_sample_fast(iterable, samplesize):
    results = []
    iterator = iter(iterable)
    # Fill in the first samplesize elements:
    for _ in xrange(samplesize):
        results.append(iterator.next())
    random.shuffle(results)  # Randomize their positions
    for i, v in enumerate(iterator, samplesize):
        r = random.randint(0, i)
        if r < samplesize:
            results[r] = v  # at a decreasing rate, replace random items

# Get inputs
pr1_path = sys.argv[1]
pr2_path = sys.argv[2]
ar1_path = sys.argv[3]
ar2_path = sys.argv[4]
sr1_path = sys.argv[5]
sr2_path = sys.argv[6]
max_psample = int(sys.argv[7])

prid_processing = lambda i: i
abid_processing = lambda i: i.split('|')[0] + i.split('-')[-1]

r1_sample = []
r2_sample = []
# Presence sample
print("presence processing ...")
pr_count = 0
with open(pr1_path, "r") as pr1_file, open(pr2_path, "r") as pr2_file:
    for r1, r2 in zip(SeqIO.parse(pr1_file, "fastq"), SeqIO.parse(pr2_file, "fastq")):
        r1.id = prid_processing(r1.id)
        r1.description="presence"
        r1_sample.append(r1)
        r2.id = prid_processing(r2.id)
        r2.description="presence"
        r2_sample.append(r2)
        pr_count += 1
print(f"presence count: {pr_count}")
print(f"presence subsample: {max_psample if max_psample != -1 else pr_count}")
pb_index = random.sample(range(pr_count), max_psample if max_psample != -1 else pr_count)
r1_sample = [r1_sample[i] for i in pb_index]
r2_sample = [r2_sample[i] for i in pb_index]
# Absence sample
# Count absence sample
print("absence processing ...")
ab_count = sum(1 for line in open(ar1_path, "r")) // 4
ab_index = random.sample(range(ab_count), (max_psample if max_psample != -1 else pr_count) * 1)
ab_index.sort()
print(f"absence count: {ab_count}")
print(f"absence subsample size: {len(ab_index)}")

with open(ar1_path, "r") as ar1_file, open(ar2_path, "r") as ar2_file:
    j = 0
    for i, (r1, r2) in enumerate(zip(SeqIO.parse(ar1_file, "fastq"), SeqIO.parse(ar2_file, "fastq"))):
        if i == ab_index[j]:
            r1.id = abid_processing(r1.id)
            r1.description="absence"
            r1_sample.append(r1)
            r2.id = abid_processing(r2.id)
            r2.description="absence"
            r2_sample.append(r2)
            j += 1
            if j == len(ab_index):
                break
# suffle data
print("All sample processed")

print("Write sample ...")
# write r1 sample fastq
with open(sr1_path, "w") as r1_file:
    SeqIO.write(r1_sample, r1_file, "fastq")
# write r1 sample fastq
with open(sr2_path, "w") as r2_file:
    SeqIO.write(r2_sample, r2_file, "fastq")

print("Done")
